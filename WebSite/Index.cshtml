@inherits System.Web.WebPages.WebPage
@using System.Reflection
@using SnapRepo.Azure
@using SnapRepo.Common
@using SnapRepo.Common.IoC
@using SnapRepo.Scheduling
@using Microsoft.WindowsAzure.Storage
@using Microsoft.WindowsAzure.Storage.Blob
@{
    //It's recommended to use HTTPS with basic authentication
    if (SettingsFactory.ForceHttps && Request.Url.Scheme != "https")
    {
        Response.Redirect(Request.Url.AbsoluteUri.Replace("http", "https"), true);
        return;
    }
    //Authentication checks before any actions
    if (SettingsFactory.UseBasicAuth && string.IsNullOrEmpty(Request.Headers["Authorization"]))
    {
        //The IIS basic authentication has to be enabled!
        Response.StatusCode = 401;
        Response.AddHeader("WWW-Authenticate", "Basic realm=\"SnapRepo\"");
        Response.End();
        return;
    }
    if (SettingsFactory.CheckUserGroups)
    {
        //You can also use your own authentication method.
        if (!(User.IsInRole("WebAdmins") || User.IsInRole("CmsAdmins") || User.IsInRole("Administrators")))
        {
            Response.ClearContent();
            Response.Write("Access Denied!");
            Response.StatusCode = (int)HttpStatusCode.Forbidden;
            return;
        }
    }
    OnLoad();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SnapRepo - Snapshot Backup Azure Repository</title>
    <script src="//code.jquery.com/jquery-2.1.1.min.js"></script>
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootswatch/3.3.7/yeti/bootstrap.min.css">
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
</head>
<body>
    <div class="container">
        <div class="page-header">
            <a class="pull-right btn btn-primary btn-xs" href="?@($"&settings={SettingsUrlParam}")">refresh data</a>
            <h1>
                SnapRepo - Snapshot Backup Azure Repository
                <a href="#" data-toggle="collapse" data-target="#collapse-info"><span class="badge"><i class="glyphicon glyphicon-info-sign"></i> Information</span></a>
            </h1>
            <div id="collapse-info" class="panel-body collapse">
                <h3>SnapRepo is for automating backups and restores</h3>
                <p>
                    SnapRepo is mainly targeted for handling and automating backups and restoring data of web site projects (like Episerver CMS).
                    It's backing up data to Azure Blob storage from virtual machines or local server and restoring it vice versa.
                    Backup data includes SQL Server Database and AppData folders and it's extendable for other storages.
                </p>

                <h3>SnapRepo is designed for following use cases and purposes</h3>
                <ul>
                    <li><b>Managing backup archives</b>
                        <ul><li>List, Create, Delete, Download and Upload backups</li></ul>
                    </li>
                    <li><b>Monitoring backups</b></li>
                    <li>Scheduling <b>daily, weekly and monthly backups</b></li>
                    <li>Scheduling <b>cleaning of old backups</b></li>
                    <li><b>Transferring data</b> between environments (Production, Staging, Testing, Dev, Local)</li>
                    <li><b>Helping integration testing</b> (or any other kind of processes which needs the environment to be restored several times)
                        <ul>
                            <li>Quickly create/restore snapshots of data so it would be easy to rerun the process.</li>
                            <li>You may even have different snapshots for different test scenarios.</li>
                        </ul>
                    </li>
                    <li><b>Backups before production deployments</b> or even automate the backups in deployments</li>
                    <li><b>Works on my machine -problems</b> and easing the problem solving of production environment</li>
                    <li>Improving the data integrity by handling full backup packages. Packages are meant to create and restored with the same tools.</li>
                </ul>

                <h3>Installation</h3>
                <p>This instruction is to install the SnapRepo as parallel web site which exists in same server or at least in same network.</p>
                <ol>
                    <li>Create IIS site based on the <a href="https://github.com/huilaaja/SnapRepo" target="_blank">GitHub repository</a> sources</li>
                    <li>Enable IIS Basic Authentication or implement your own authentication.</li>
                    <li>Create Azure Blob Storage (type: private)</li>
                    <li>
                        Set up 2 connection strings:
                        <ol>
                            <li>
                                <b>AzureBackupBlobStorage</b><br/>
                                Connections string to Azure Blob Storage. <a href="https://azure.microsoft.com/en-us/documentation/articles/storage-configure-connection-string/" target="_blank">Read more</a><br/>
                                Example: &lt;add name="AzureBackupBlobStorage" connectionString="DefaultEndpointsProtocol=[http|https];AccountName=accountName;AccountKey=accountKey" /&gt;
                            </li>
                            <li>
                                <b>SnapRepo</b><br/>
                                Connection string to SQL Server (with high user privileges)<br/>
                                Example: &lt;add name="SnapRepo" connectionString="Data Source=(local);Initial Catalog=DatabaseName;User ID=sa;Password=sa_password;Connection Timeout=1800;Integrated Security=False;MultipleActiveResultSets=True" providerName="System.Data.SqlClient" /&gt;
                            </li>
                        </ol>
                    </li>
                    <li>Make sure that following settings are correct
                        <ul>
                            <li>Make sure your IIS application user has access to required resources (folders) and SQL Server user (in connection string) has necessary privileges.</li>
                            <li>SnapRepo needs to have long timeouts for requests and db connections. By default this site has 60min (3600secs) timeouts and SQL Connection timeout is set to 30 minutes (1800secs).</li>
                            <li>
                                Scheduled services required that the IIS site needs to be alive all the time.
                                So you need to set:
                                <ol>
                                    <li>application pool <b>Start Mode = "AlwaysRunning"</b></li>
                                    <li>from IIS site Advance Settings <b>Preload Enabled = True</b></li>
                                </ol>
                                <a href="https://weblog.west-wind.com/posts/2013/oct/02/use-iis-application-initialization-for-keeping-aspnet-apps-alive" target="_blank">Here you can find further information on those settings.</a>
                            </li>
                        </ul>
                    </li>
                    <li>Start using it!</li>
                </ol>

                <h3>Configuration options</h3>
                <p>From web.config &lt;appSettings&gt; you can change the default configuration of following settings:</p>
                <ul>
                    <li>Local repository path:<br/>
                        &lt;add key="SnapRepo.LocalRepositoryPath" value="C:\Sites\ExampleSite\SnapRepository\"/&gt;</li>
                    <li>AppData folder path:<br/>
                        &lt;add key="SnapRepo.AppDataFolder" value="C:\Sites\ExampleSite\AppData" /&gt;</li>
                    <li>IIS site name:<br/>
                        &lt;add key="SnapRepo.IisSiteName" value="ExampleSite" /&gt;</li>
                    <li>Blob storage container name:<br/>
                        &lt;add key="SnapRepo.ContainerName" value="CustomBlobStorageContainerName"/&gt;</li>
                    <li>Database shared folder path (for transferring database backup):<br/>
                        &lt;add key="SnapRepo.DbSharedBackupFolder" value="\\ServerName\Shared\Folder\"/&gt;</li>
                    <li>Disabling basic authentication:<br/>
                        &lt;add key="SnapRepo.UseBasicAuth" value="False" /&gt;</li>
                    <li>Disabling user group checks:<br/>
                        &lt;add key="SnapRepo.CheckUserGroups" value="False"/&gt;</li>
                </ul>

                <h3>Requirements and inside information</h3>
                <p>Build with .NET Framework 4.6.1.</p>
                <h4>Depends on 4 NuGet Packages</h4>
                <ol>
                    <li>WindowsAzure.Storage version="7.2.1"</li>
                    <li>DotNetZip version="1.9.1.8"</li>
                    <li>FluentScheduler version="5.0.0"</li>
                    <li>Microsoft.Web.Administration version="7.0.0.0"</li>
                </ol>
                <h4>Require SQL Server SMO DLLs <small>(these are included in project)</small></h4>
                <ol>
                    <li>Microsoft.SqlServer.ConnectionInfo.dll version=13.0.0.0</li>
                    <li>Microsoft.SqlServer.Management.Sdk.Sfc.dll version=13.0.0.0</li>
                    <li>Microsoft.SqlServer.Smo.dll version=13.0.0.0</li>
                    <li>Microsoft.SqlServer.SqlClrProvider.dll version=13.0.0.0</li>
                    <li>Microsoft.SqlServer.SqlEnum.dll version=13.0.0.0</li>
                </ol>
                <h4>Two different ways to run it</h4>
                <ol>
                    <li>Parallel web site <i>(recommended)</i> which will access the project's resources. <i>(More secure and optimal way)</i></li>
                    <li>Inside of target web site which you are targeting the backups. It can be Episerver web site or any other type. <i>(Easier to maintain)</i></li>
                </ol>
                <h4>Transferring the backups</h4>
                <p>To be able to transferring the backups easily from environment to another, it's required that this tool is installed in all the environments. Only the Azure Blob storage remain the same in all environments.</p>
                <h4>SnapRepo requires lot of privileges</h4>
                <ul>
                    <li>IIS application pool user needs to have write and delete access to Local Repository -folder and AppData-folder.</li>
                    <li>SQL Server user needs to have sysadmin (create, restore and query databases) privileges in SQL Server</li>
                </ul>
                <h3>Security and limitations</h3>
                <p>This tool is not meant for basic editors or users nor it's meant to backup hole server. It's meant that only developers, devops and hosting "Super Administrators" have access to this tool.</p>
                <p>By default this tool uses basic authentication and check's that user belongs to one of this groups: WebAdmins, CmsAdmins, Administrators. But you can easily change authentication and use your own.</p>
                <p>With basic authentication it's recommended to use secured connection with HTTPS-protocol.</p>

            </div>
        </div>
 
        @if (!SettingsFactory.DatabaseExists(Settings.DbConnectionString, Settings.DatabaseName))
        {
            <div class="alert alert-danger">Could not connect to database. Check the connection string!</div>
        }

        <div class="panel panel-default" id="panel1">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <a data-toggle="collapse" data-target="#collapse-settings" href="#">Settings <small>show/hide</small></a>
                </h3>
            </div>
            <div id="collapse-settings" class="panel-body panel-collapse collapse @Html.Raw(Request.Params["settings"] != null ? "" : "in")">
                <form method="GET" role="form" action="@(Request.Url.AbsolutePath)">
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">Local Repository Path<br/><small>IIS application pool user needs to have write and delete access to this folder</small></label>
                        <div class="col-sm-8"><input type="text" name="localRepositoryPath" value="@Settings.LocalRepositoryPath" class="form-control" disabled="disabled" /></div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">Azure Repository<br/><small>Blob storage address</small></label>
                        <div class="col-sm-8"><input type="text" name="azureRepositoryUrl" value="@(Settings.AzureRepositoryUrl)" class="form-control" disabled="disabled" /></div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">Azure Blob Storage Container Name <br/><small>Folder name for blob storage</small></label>
                        <div class="col-sm-8"><input type="text" name="containerName" value="@Settings.ContainerName" class="form-control" /></div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">AppData Folder Path <br/><small>Path to the folder you want to backup/restore</small></label>
                        <div class="col-sm-8"><input type="text" name="appDataFolder" value="@Settings.AppDataFolder" class="form-control" /></div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">Database Server Name <br/><small>Target of the backup/restore operations</small></label>
                        <div class="col-sm-8"><input type="text" name="databaseServerName" value="@Settings.DatabaseServerName" disabled="disabled" class="form-control" /></div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">Database Name <br/><small>Target of the backup/restore operations</small></label>
                        <div class="col-sm-8"><input type="text" name="databaseName" value="@Settings.DatabaseName" disabled="disabled" class="form-control" /></div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">Database owner <br/><small>Owner will get the same privileges to restored database</small></label>
                        <div class="col-sm-8"><input type="text" name="databaseOwner" value="@Settings.DatabaseOwner" disabled="disabled" class="form-control" /></div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">Database Shared Folder Path  (optional) <br/><small>If SQL Server exists in another server, you need to have shared folder to transfer database</small></label>
                        <div class="col-sm-8"><input type="text" name="dbSharedBackupFolder" value="@Settings.DbSharedBackupFolder" placeholder="\\ServerName\Shared\Folder\Path\" class="form-control" /></div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">Site Name (optional) <br/><small>Target web site which will be recycled after restore</small></label>
                        <div class="col-sm-8">
                            <select name="iisSiteName" class="form-control">
                            @foreach (var sitekvp in GetIisSiteNames())
                            {
                                <option value="@sitekvp.Value" @(Settings.IisSiteName == sitekvp.Value ? "selected":"") >@sitekvp.Key</option>
                            }
                            </select>
                        </div>
                    </div>
                    <div class="form-group form-group-sm row">
                        <label for="" class="col-sm-4">&nbsp;</label>
                        <div class="col-sm-8"><input type="submit" value="Activate" class="btn btn-primary" /></div>
                    </div>
                    <input type="hidden" name="settings" value="" />
                    <input type="hidden" name="action" value="setSettings" />
                    
                </form>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(ActionResult))
        {
            <div id="result-panel" class="panel panel-primary">
                <div class="panel-heading">
                    Results <button type="button" class="close" data-target="#result-panel" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                </div>
                <div class="panel-body">@Html.Raw(ActionResult)</div>
            </div>
        }

        <h2>Azure Backup Repository</h2>
        @{
            var azureBackups = GetAzureBlobStorageBackups()?
                .Select(b => new
                {
                    b.Name,
                    Size = Math.Round(((double)b.Properties.Length / 1000000), 2) + " MB",
                    b.Properties.LastModified,
                    Download = "<a href=\"?action=download" +
                            $"&file={HttpUtility.UrlEncode(b.Name)}" +
                            $"&settings={SettingsUrlParam}" +
                            "\" class=\"btn btn-default btn-xs\">Download to Local</a>",
                })
                .ToArray();
        }

        @if (azureBackups == null)
        { <div class="alert alert-danger">Could not connect to Azure Blob Storage. Check the connection string!</div> }
        else if (!azureBackups.Any())
        { <div class="alert">No backups in Azure Blob Storage!</div> }
        else
        {
            @CreateTableFromList(azureBackups);
        }


        @if (Request.Params["settings"] != null)
        {
            <div class="panel panel-default" id="panel-backupAzure">
                <div class="panel-heading">
                    <h2 class="panel-title">
                        <a data-toggle="collapse" data-target="#collapse-backupAzure" href="#panel-backupAzure">
                            Create Backup To Azure Repository <small>show/hide</small>
                        </a>
                    </h2>
                </div>
                <div id="collapse-backupAzure" class="panel-body panel-collapse collapse">
                    <form method="GET" role="form" action="@(Request.Url.AbsolutePath)" class="form-horizontal">
                        <input type="hidden" name="settings" value="@SettingsSerialized" />
                        <input type="hidden" name="action" value="backupAzure" />

                        <div class="form-group">
                            <label class="col-sm-3 control-label" for="">Short Backup Name <br />(optional, no whitespace)</label>
                            <div class="col-sm-9">
                                <input type="text" name="backupInfix" value="@(Request.Params["backupInfix"] ?? "")" placeholder="daily" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-3"></div>
                            <div class="col-sm-9">
                                <input type="submit" value="BACKUP To Azure" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <h2>Local Backup Repository</h2>

            var localBackups = new DirectoryInfo(Settings.LocalRepositoryPath).GetFiles("*_package.zip").OrderByDescending(f => f.Name)
                .Select(b => new
                {
                    b.Name,
                    Size = Math.Round(((double)b.Length / 1000000), 2) + " MB",
                    b.CreationTime,
                    Upload = "<a href=\"?action=upload" +
                            $"&file={HttpUtility.UrlEncode(b.Name)}" +
                            $"&settings={SettingsUrlParam}" +
                            "\" class=\"btn btn-default btn-xs\">Upload to Azure</a>",
                    Restore = "<a href=\"?action=restoreLocal" +
                            $"&file={HttpUtility.UrlEncode(b.Name)}" +
                            $"&settings={SettingsUrlParam}" +
                            "\" onclick=\"return confirm('Are you sure you want to RESTORE this item?');\"" +
                            " class=\"btn btn-info btn-xs\">Restore</a>",
                    Delete = "<a href=\"?action=deleteLocal" +
                            $"&file={HttpUtility.UrlEncode(b.Name)}" +
                            $"&settings={SettingsUrlParam}" +
                            "\" onclick=\"return confirm('Are you sure you want to DELETE this item?');\"" +
                            " class=\"btn btn-danger btn-xs\">Delete</a>",
                })
                .ToArray();

            @CreateTableFromList(localBackups)

            <div class="panel panel-default" id="panel-backupLocal">
                <div class="panel-heading">
                    <h2 class="panel-title">
                        <a data-toggle="collapse" data-target="#collapse-backupLocal" href="#panel-backupLocal">
                            Create Backup To Local Repository <small>show/hide</small>
                        </a>
                    </h2>
                </div>
                <div id="collapse-backupLocal" class="panel-body panel-collapse collapse">
                    <form method="GET" role="form" action="@(Request.Url.AbsolutePath)" class="form-horizontal">
                        <input type="hidden" name="settings" value="@SettingsSerialized" />
                        <input type="hidden" name="action" value="backupLocal" />

                        <div class="form-group">
                            <label class="col-sm-3 control-label" for="">Short Backup Name <br />(optional, no whitespace)</label>
                            <div class="col-sm-9">
                                <input type="text" name="backupInfix" value="@(Request.Params["backupInfix"] ?? "")" placeholder="daily" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-3"></div>
                            <div class="col-sm-9">
                                <input type="submit" value="BACKUP To Local" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <a class="pull-right btn btn-primary btn-xs" href="?action=logs">read logs</a>
            <h2>Local Scheduled Jobs</h2>
            var jobs = ScheduledJobService.GetJobSettingsAndSchedule()
                .Select(t => new
                {
                    t.Item1.Name,
                    t.Item1.Interval,
                    AtTime = $"{t.Item1.AtHours.ToString("d2")}:{t.Item1.AtMins.ToString("d2")}",
                    t.Item2?.NextRun,
                    t.Item2?.Disabled,
                    Query = t.Item1.Query,
                    Delete = "<a href=\"?action=removeBackupJob" +
                        $"&jobName={HttpUtility.UrlEncode(t.Item1.Name)}" +
                        $"&settings={SettingsUrlParam}" +
                        "\" onclick=\"return confirm('Are you sure you want to DELETE this item?');\"" +
                        " class=\"btn btn-danger btn-xs\">Delete</a>",
                });

            @CreateTableFromList(jobs)

            <div class="panel panel-default" id="panel-addBackupJob">
                <div class="panel-heading">
                    <h2 class="panel-title">
                        <a data-toggle="collapse" data-target="#collapse-addBackupJob" href="#panel-addBackupJob">
                            Create Scheduled Job <small>show/hide</small>
                        </a>
                    </h2>
                </div>
                <div id="collapse-addBackupJob" class="panel-body panel-collapse collapse">

                    <form method="GET" role="form" action="@(Request.Url.AbsolutePath)" class="form-horizontal">
                        <input type="hidden" name="settings" value="@SettingsSerialized" />
                        <input type="hidden" name="action" value="addBackupJob" />

                        <div class="form-group">
                            <label class="col-sm-3 control-label" for="">Job Name <small>(unique)</small></label>
                            <div class="col-sm-9">
                                <input type="text" name="jobName" value="@(Request.Params["jobName"] ?? "Daily Azure Backup Job")" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label" for="">Interval (Days)</label>
                            <div class="col-sm-9">
                                <input type="text" name="interval" value="@(Request.Params["interval"] ?? "1")" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group form-inline">
                            <label class="col-sm-3 control-label" for="">Starting Time</label>
                            <div class="col-sm-9">
                                <label class="control-label" for="">Hours</label>
                                <input type="text" name="atHours" value="@(Request.Params["atHours"] ?? "23")" class="form-control" />
                                <label class="control-label" for="">Minutes</label>
                                <input type="text" name="atMins" value="@(Request.Params["atMins"] ?? "59")" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label" for="">Query Parameters<br/><small>(Scheduler will call this page with these parameters)</small></label>
                            <div class="col-sm-9">
                                <input type="text" name="queryParams" value="@(Request.Params["queryParams"] ?? "?action=backupAzure&backupInfix=daily-backup")" class="form-control"/>
                                <small>
                                    <b>other examples:</b><br/>
                                    Cleaning Daily Azure Backups Job: <b>?action=cleanAzure&filterInfix=_daily-backup_&minDays=7</b><br/>
                                    Weekly Azure Backup Job: <b>?action=backupAzure&backupInfix=weekly-backup</b><br/>
                                    Cleaning Weekly Azure Backups Job: <b>?action=cleanAzure&filterInfix=_weekly-backup_&minDays=30</b><br/>
                                    Weekly Local Backup Job: <b>?action=backupLocal&backupInfix=weekly-local-backup</b><br/>
                                </small>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-3"></div>
                            <div class="col-sm-9">
                                <input type="submit" value="Create Scheduled Job" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>

                </div>
            </div>

            <hr/>

            <div class="panel panel-default" id="panel-cleanAzure">
                <div class="panel-heading">
                    <h2 class="panel-title">
                        <a data-toggle="collapse" data-target="#collapse-cleanAzure" href="#panel-cleanAzure">
                            Clean Old Backups From Azure <small>show/hide</small>
                        </a>
                    </h2>
                </div>
                <div id="collapse-cleanAzure" class="panel-body panel-collapse collapse">

                    <form method="GET" role="form" action="@(Request.Url.AbsolutePath)" class="form-horizontal">
                        <input type="hidden" name="settings" value="@SettingsSerialized" />
                        <input type="hidden" name="action" value="cleanAzure" />

                        <div class="form-group">
                            <label class="col-sm-3 control-label" for="">Filter by backup name</label>
                            <div class="col-sm-9">
                                <input type="text" name="filterInfix" value="@(Request.Params["filterInfix"] ?? "_daily_")" placeholder="_daily_" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label" for="">Minimum number of days old</label>
                            <div class="col-sm-9">
                                <input type="text" name="minDays" value="@(Request.Params["minDays"] ?? "7")" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-3"></div>
                            <div class="col-sm-9">
                                <label class="checkbox-inline" for="simulate">
                                    <input type="checkbox" id="simulate" name="simulate" @(Request.Params["simulate"] == "True" ? "checked" : "") value="True" />
                                    Simulate (will not delete anything)
                                </label>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-3"></div>
                            <div class="col-sm-9">
                                <input type="submit" value="CLEAN Azure" class="btn btn-danger" onclick="return confirm('Are you sure you want to CLEAN Azure backups?');" />
                            </div>
                        </div>

                    </form>
                </div>
            </div>

            <hr />
        }
    </div>



</body>
</html>
@functions
{
    public string ActionResult;
    public ManagerSettings Settings;
    public ScheduledJobService ScheduledJobService;
    public BlobStorageService BlobStorageService;
    public ActionService ActionService;
    public LogService LogService;
    public string SettingsSerialized => Json.Encode(Settings);
    public string SettingsUrlParam => HttpUtility.UrlEncode(SettingsSerialized);

    public void OnLoad()
    {
        bool getActionsFromParamsOrDefault = (string.IsNullOrEmpty(Request.Params["settings"]) || Request.Params["action"] == "setSettings");
        Settings = getActionsFromParamsOrDefault
                ? SettingsFactory.CreateSettingsFromParamsOrDefault(Request.Params)
                : Json.Decode<ManagerSettings>(Request.Params["settings"]);

        ScheduledJobService = ObjectFactory.Container.GetInstance<ScheduledJobService>();
        BlobStorageService = ObjectFactory.Container.GetInstance<BlobStorageService>();
        LogService = ObjectFactory.Container.GetInstance<LogService>();
        ActionService = ObjectFactory.Container.GetInstance<ActionService>();

        if (Request.Params["action"] == "logs")
        {
            Response.ClearContent();
            Response.ContentType = "text/plain";
            Response.Write(LogService.ReadLog());
            Response.StatusCode = (int)HttpStatusCode.OK;
            Response.End();
            return;
        }
        ActionResult = ActionService.CreateActionResult(Request.Params, Settings);
        if (ActionResult != null)
        {
            //Do redirect so F5 (refresh) wont do duplicate the action.
            Response.Redirect($"{Request.Url.AbsolutePath}?action=result&result={HttpUtility.UrlEncode(ActionResult)}&settings={SettingsUrlParam}");
        }
        if (Request.Params["action"] == "result")
        {
            ActionResult = Request.Params["result"];
        }

    }

    public ICloudBlob[] GetAzureBlobStorageBackups()
    {
        try { return BlobStorageService.GetListOfBlobStorageItems(Settings).ToArray(); }
        catch (StorageException) { return null; }
        catch (FormatException) { return null; }
    }

    public IList<KeyValuePair<string,string>> GetIisSiteNames()
    {
        try
        {
            using (Microsoft.Web.Administration.ServerManager serverManager = new Microsoft.Web.Administration.ServerManager())
            {
                var sites = serverManager.Sites?.Select(s => new KeyValuePair<string, string>(s.Name, s.Name))
                    .OrderBy(s => s.Key)
                    .ToList() ?? new List<KeyValuePair<string, string>>() {};
                sites.Insert(0, new KeyValuePair<string, string>("-----", ""));
                return sites;
            }
        }
        catch (UnauthorizedAccessException e)
        {
            LogService.WriteLog("Could not get IIS site names: " + e);
            return new List<KeyValuePair<string, string>>() { new KeyValuePair<string, string>("Could not get IIS site names!", "") };
        }
    }
}

@helper CreateTableFromList(IEnumerable<object> list)
{
    var array = list?.ToArray() ?? new object[]{};
    object firstItem = array.FirstOrDefault();
    var firstItemProperties = firstItem?.GetType().GetProperties() ?? new PropertyInfo[] { };
    <table class="table table-condensed table-hover">
        <thead>
            <tr>
                @foreach (var prd in firstItemProperties)
                {
                    <td>@(prd.Name)</td>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var d in array)
            {
                <tr>
                    @foreach (var prd in firstItemProperties)
                    {
                        <td>@Html.Raw(prd.GetValue(d))</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

